// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: QuoteDataEvent.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace QuoteData {

  /// <summary>Holder for reflection information generated from QuoteDataEvent.proto</summary>
  public static partial class QuoteDataEventReflection {

    #region Descriptor
    /// <summary>File descriptor for QuoteDataEvent.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QuoteDataEventReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRRdW90ZURhdGFFdmVudC5wcm90bxIaUXVvdGVEYXRhU2VydmljZS5RdW90",
            "ZURhdGEaH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8aHmdvb2ds",
            "ZS9wcm90b2J1Zi93cmFwcGVycy5wcm90byLoAQoET0hMQxIpCgRPcGVuGAEg",
            "ASgLMhsuZ29vZ2xlLnByb3RvYnVmLkZsb2F0VmFsdWUSKQoESGlnaBgCIAEo",
            "CzIbLmdvb2dsZS5wcm90b2J1Zi5GbG9hdFZhbHVlEigKA0xvdxgDIAEoCzIb",
            "Lmdvb2dsZS5wcm90b2J1Zi5GbG9hdFZhbHVlEg0KBUNsb3NlGAQgASgCEg4K",
            "BlZvbHVtZRgFIAEoBRISCgpUaWNrc0NvdW50GAYgASgFEi0KCUxvY2FsVGlt",
            "ZRgHIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAiWQoEVGljaxIP",
            "CgdEZWFsUXR5GAEgASgFEhEKCURlYWxQcmljZRgCIAEoAhItCglMb2NhbFRp",
            "bWUYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQh2qAhpRdW90",
            "ZURhdGFTZXJ2aWNlLlF1b3RlRGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::QuoteData.OHLC), global::QuoteData.OHLC.Parser, new[]{ "Open", "High", "Low", "Close", "Volume", "TicksCount", "LocalTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QuoteData.Tick), global::QuoteData.Tick.Parser, new[]{ "DealQty", "DealPrice", "LocalTime" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class OHLC : pb::IMessage<OHLC> {
    private static readonly pb::MessageParser<OHLC> _parser = new pb::MessageParser<OHLC>(() => new OHLC());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OHLC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QuoteData.QuoteDataEventReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OHLC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OHLC(OHLC other) : this() {
      Open = other.Open;
      High = other.High;
      Low = other.Low;
      close_ = other.close_;
      volume_ = other.volume_;
      ticksCount_ = other.ticksCount_;
      localTime_ = other.localTime_ != null ? other.localTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OHLC Clone() {
      return new OHLC(this);
    }

    /// <summary>Field number for the "Open" field.</summary>
    public const int OpenFieldNumber = 1;
    private static readonly pb::FieldCodec<float?> _single_open_codec = pb::FieldCodec.ForStructWrapper<float>(10);
    private float? open_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }


    /// <summary>Field number for the "High" field.</summary>
    public const int HighFieldNumber = 2;
    private static readonly pb::FieldCodec<float?> _single_high_codec = pb::FieldCodec.ForStructWrapper<float>(18);
    private float? high_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? High {
      get { return high_; }
      set {
        high_ = value;
      }
    }


    /// <summary>Field number for the "Low" field.</summary>
    public const int LowFieldNumber = 3;
    private static readonly pb::FieldCodec<float?> _single_low_codec = pb::FieldCodec.ForStructWrapper<float>(26);
    private float? low_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? Low {
      get { return low_; }
      set {
        low_ = value;
      }
    }


    /// <summary>Field number for the "Close" field.</summary>
    public const int CloseFieldNumber = 4;
    private float close_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Close {
      get { return close_; }
      set {
        close_ = value;
      }
    }

    /// <summary>Field number for the "Volume" field.</summary>
    public const int VolumeFieldNumber = 5;
    private int volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "TicksCount" field.</summary>
    public const int TicksCountFieldNumber = 6;
    private int ticksCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TicksCount {
      get { return ticksCount_; }
      set {
        ticksCount_ = value;
      }
    }

    /// <summary>Field number for the "LocalTime" field.</summary>
    public const int LocalTimeFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp localTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LocalTime {
      get { return localTime_; }
      set {
        localTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OHLC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OHLC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Open, other.Open)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(High, other.High)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Low, other.Low)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Close, other.Close)) return false;
      if (Volume != other.Volume) return false;
      if (TicksCount != other.TicksCount) return false;
      if (!object.Equals(LocalTime, other.LocalTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (open_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Open);
      if (high_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(High);
      if (low_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Low);
      if (Close != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Close);
      if (Volume != 0) hash ^= Volume.GetHashCode();
      if (TicksCount != 0) hash ^= TicksCount.GetHashCode();
      if (localTime_ != null) hash ^= LocalTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (open_ != null) {
        _single_open_codec.WriteTagAndValue(output, Open);
      }
      if (high_ != null) {
        _single_high_codec.WriteTagAndValue(output, High);
      }
      if (low_ != null) {
        _single_low_codec.WriteTagAndValue(output, Low);
      }
      if (Close != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Close);
      }
      if (Volume != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Volume);
      }
      if (TicksCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TicksCount);
      }
      if (localTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(LocalTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (open_ != null) {
        size += _single_open_codec.CalculateSizeWithTag(Open);
      }
      if (high_ != null) {
        size += _single_high_codec.CalculateSizeWithTag(High);
      }
      if (low_ != null) {
        size += _single_low_codec.CalculateSizeWithTag(Low);
      }
      if (Close != 0F) {
        size += 1 + 4;
      }
      if (Volume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Volume);
      }
      if (TicksCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TicksCount);
      }
      if (localTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OHLC other) {
      if (other == null) {
        return;
      }
      if (other.open_ != null) {
        if (open_ == null || other.Open != 0F) {
          Open = other.Open;
        }
      }
      if (other.high_ != null) {
        if (high_ == null || other.High != 0F) {
          High = other.High;
        }
      }
      if (other.low_ != null) {
        if (low_ == null || other.Low != 0F) {
          Low = other.Low;
        }
      }
      if (other.Close != 0F) {
        Close = other.Close;
      }
      if (other.Volume != 0) {
        Volume = other.Volume;
      }
      if (other.TicksCount != 0) {
        TicksCount = other.TicksCount;
      }
      if (other.localTime_ != null) {
        if (localTime_ == null) {
          LocalTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LocalTime.MergeFrom(other.LocalTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            float? value = _single_open_codec.Read(input);
            if (open_ == null || value != 0F) {
              Open = value;
            }
            break;
          }
          case 18: {
            float? value = _single_high_codec.Read(input);
            if (high_ == null || value != 0F) {
              High = value;
            }
            break;
          }
          case 26: {
            float? value = _single_low_codec.Read(input);
            if (low_ == null || value != 0F) {
              Low = value;
            }
            break;
          }
          case 37: {
            Close = input.ReadFloat();
            break;
          }
          case 40: {
            Volume = input.ReadInt32();
            break;
          }
          case 48: {
            TicksCount = input.ReadInt32();
            break;
          }
          case 58: {
            if (localTime_ == null) {
              LocalTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LocalTime);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Tick : pb::IMessage<Tick> {
    private static readonly pb::MessageParser<Tick> _parser = new pb::MessageParser<Tick>(() => new Tick());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tick> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QuoteData.QuoteDataEventReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tick() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tick(Tick other) : this() {
      dealQty_ = other.dealQty_;
      dealPrice_ = other.dealPrice_;
      localTime_ = other.localTime_ != null ? other.localTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tick Clone() {
      return new Tick(this);
    }

    /// <summary>Field number for the "DealQty" field.</summary>
    public const int DealQtyFieldNumber = 1;
    private int dealQty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DealQty {
      get { return dealQty_; }
      set {
        dealQty_ = value;
      }
    }

    /// <summary>Field number for the "DealPrice" field.</summary>
    public const int DealPriceFieldNumber = 2;
    private float dealPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DealPrice {
      get { return dealPrice_; }
      set {
        dealPrice_ = value;
      }
    }

    /// <summary>Field number for the "LocalTime" field.</summary>
    public const int LocalTimeFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp localTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LocalTime {
      get { return localTime_; }
      set {
        localTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tick);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tick other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DealQty != other.DealQty) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DealPrice, other.DealPrice)) return false;
      if (!object.Equals(LocalTime, other.LocalTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DealQty != 0) hash ^= DealQty.GetHashCode();
      if (DealPrice != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DealPrice);
      if (localTime_ != null) hash ^= LocalTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DealQty != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DealQty);
      }
      if (DealPrice != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(DealPrice);
      }
      if (localTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LocalTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DealQty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DealQty);
      }
      if (DealPrice != 0F) {
        size += 1 + 4;
      }
      if (localTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tick other) {
      if (other == null) {
        return;
      }
      if (other.DealQty != 0) {
        DealQty = other.DealQty;
      }
      if (other.DealPrice != 0F) {
        DealPrice = other.DealPrice;
      }
      if (other.localTime_ != null) {
        if (localTime_ == null) {
          LocalTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LocalTime.MergeFrom(other.LocalTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DealQty = input.ReadInt32();
            break;
          }
          case 21: {
            DealPrice = input.ReadFloat();
            break;
          }
          case 26: {
            if (localTime_ == null) {
              LocalTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LocalTime);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
